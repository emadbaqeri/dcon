#!/bin/bash

# dcon Pre-commit Hook
# This hook runs code quality checks before allowing commits
# 
# Checks performed:
# - Code formatting with cargo fmt
# - Linting with cargo clippy (strict settings)
# - Basic compilation check with cargo check
#
# To bypass this hook in emergency situations, use: git commit --no-verify

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[dcon pre-commit]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[dcon pre-commit]${NC} ✅ $1"
}

print_warning() {
    echo -e "${YELLOW}[dcon pre-commit]${NC} ⚠️  $1"
}

print_error() {
    echo -e "${RED}[dcon pre-commit]${NC} ❌ $1"
}

# Function to check if we're in a Rust project
check_rust_project() {
    if [ ! -f "Cargo.toml" ]; then
        print_error "Cargo.toml not found. This hook is designed for Rust projects."
        exit 1
    fi
}

# Function to check if cargo is available
check_cargo() {
    if ! command -v cargo &> /dev/null; then
        print_error "cargo command not found. Please install Rust and Cargo."
        exit 1
    fi
}

# Function to run cargo fmt check
check_formatting() {
    print_status "Checking code formatting with cargo fmt..."

    # Check if rustfmt is available
    if ! command -v rustfmt &> /dev/null; then
        print_error "rustfmt not found. Install with: rustup component add rustfmt"
        return 1
    fi

    # Run formatting check with timeout to prevent hanging (if timeout is available)
    if command -v timeout &> /dev/null; then
        timeout_cmd="timeout 30s"
    else
        timeout_cmd=""
    fi

    if ! $timeout_cmd cargo fmt --all -- --check; then
        print_error "Code formatting check failed!"
        print_warning "Run 'cargo fmt' to fix formatting issues."
        print_warning "Files that need formatting:"
        # Show which files need formatting (non-blocking)
        cargo fmt --all -- --check 2>&1 | grep "Diff in" | head -5 || true
        return 1
    fi

    print_success "Code formatting is correct"
    return 0
}

# Function to run cargo clippy
check_linting() {
    print_status "Running linting checks with cargo clippy..."

    # Check if clippy is available
    if ! command -v cargo-clippy &> /dev/null; then
        print_error "clippy not found. Install with: rustup component add clippy"
        return 1
    fi

    # Use strict clippy settings for high code quality with timeout (if available)
    if command -v timeout &> /dev/null; then
        timeout_cmd="timeout 60s"
    else
        timeout_cmd=""
    fi

    if ! $timeout_cmd cargo clippy --all-targets --all-features -- \
        -D warnings \
        -D clippy::correctness \
        -D clippy::suspicious \
        -D clippy::complexity \
        -D clippy::perf \
        -D clippy::style \
        -A clippy::module_name_repetitions \
        -A clippy::missing_errors_doc \
        -A clippy::missing_panics_doc \
        -A clippy::too_many_lines \
        -A clippy::uninlined_format_args \
        -A clippy::single_char_pattern; then
        print_error "Linting check failed!"
        print_warning "Fix the clippy warnings above before committing."
        print_warning "Common fixes:"
        echo "  - Remove unused imports and variables"
        echo "  - Add documentation for public functions"
        echo "  - Follow Rust naming conventions"
        return 1
    fi

    print_success "Linting checks passed"
    return 0
}

# Function to run cargo check
check_compilation() {
    print_status "Running compilation check with cargo check..."

    # Run compilation check with timeout (if available)
    if command -v timeout &> /dev/null; then
        timeout_cmd="timeout 90s"
    else
        timeout_cmd=""
    fi

    if ! $timeout_cmd cargo check --all-targets --all-features; then
        print_error "Compilation check failed!"
        print_warning "Fix the compilation errors above before committing."
        print_warning "Try running 'cargo build' for more detailed error messages."
        return 1
    fi

    print_success "Compilation check passed"
    return 0
}

# Main execution
main() {
    print_status "Starting pre-commit checks for dcon..."
    
    # Preliminary checks
    check_rust_project
    check_cargo
    
    # Track if any checks failed
    failed=0
    
    # Run all checks
    if ! check_formatting; then
        failed=1
    fi
    
    if ! check_linting; then
        failed=1
    fi
    
    if ! check_compilation; then
        failed=1
    fi

    # Run additional quality checks (source the script)
    if [ -f ".git/hooks/quality-checks.sh" ]; then
        print_status "Running additional quality checks..."
        source .git/hooks/quality-checks.sh
        # Run semantic versioning check (critical)
        if ! check_semantic_versioning; then
            failed=1
        fi
        # Run other checks (warnings only)
        check_cargo_toml
        check_doc_coverage
    fi
    
    # Final result
    if [ $failed -eq 1 ]; then
        print_error "Pre-commit checks failed! Commit aborted."
        echo ""
        print_warning "To bypass these checks in emergency situations, use:"
        echo "  git commit --no-verify"
        echo ""
        exit 1
    fi
    
    print_success "All pre-commit checks passed! 🎉"
    exit 0
}

# Run main function
main "$@"
