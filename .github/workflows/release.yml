name: Build and Release Binaries

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to build binaries for'
        required: true
        default: 'v1.0.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-upload:
    name: Build and Upload Binaries
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: dcon
            asset_name: dcon-x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: dcon
            asset_name: dcon-aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: dcon.exe
            asset_name: dcon-x86_64-pc-windows-msvc.exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: dcon.exe
            asset_name: dcon-aarch64-pc-windows-msvc.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: dcon
            asset_name: dcon-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: dcon
            asset_name: dcon-aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}

      - name: Set release tag
        id: tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "Building binaries for manually triggered tag: $TAG"
          else
            TAG="${GITHUB_REF#refs/tags/}"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "Building binaries for pushed tag: $TAG"
          fi

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        shell: bash
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Install cross-compilation tools (Windows ARM64)
        if: matrix.target == 'aarch64-pc-windows-msvc' && matrix.os == 'windows-latest'
        run: |
          # Windows ARM64 cross-compilation is supported natively by MSVC

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build binary
        shell: bash
        run: |
          echo "Building for target: ${{ matrix.target }}"
          cargo build --release --target ${{ matrix.target }}
          echo "Build completed for ${{ matrix.target }}"

      - name: Verify binary exists
        shell: bash
        run: |
          BINARY_PATH="target/${{ matrix.target }}/release/${{ matrix.artifact_name }}"
          if [ ! -f "$BINARY_PATH" ]; then
            echo "Error: Binary not found at $BINARY_PATH"
            exit 1
          fi
          echo "Binary found at: $BINARY_PATH"
          ls -la "$BINARY_PATH"

      - name: Strip binary (Unix only)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "Stripping binary for ${{ matrix.target }}"
          strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Prepare release asset
        shell: bash
        run: |
          mkdir -p release-assets
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release-assets/${{ matrix.asset_name }}
          echo "Prepared asset: ${{ matrix.asset_name }}"
          ls -la release-assets/${{ matrix.asset_name }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          files: release-assets/${{ matrix.asset_name }}
          fail_on_unmatched_files: true
